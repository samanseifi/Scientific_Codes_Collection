function [ u,v,p ] = channel_flow( nx, ny, nt, nit, c, rho, nu, F, dt)
% channel_flow( 41, 41, 10, 50, 1, 1, 0.1, 1, 0.1)

%nx = 41;
%ny = 41;
%nt = 10;
%nit = 50;
%c = 1;
%rho = 1;
%nu = 0.1;
%F = 1;
%dt = 0.1;

dx = 2/(nx - 1);
dy = 2/(ny - 1);
x = linspace(0, 2, nx);
y = linspace(0, 2, ny);
[X, Y] = meshgrid(x, y);



u = zeros(ny, nx);
un = zeros(ny, nx);

v = zeros(ny, nx);
vn = zeros(ny, nx);

p = zeros(ny, nx);
pn = zeros(ny, nx);

b = zeros(ny, nx);

udiff = 1;
stepcount = 0;
while (udiff > 0.001)
    un = u;
    vn = v;
    
    b = buildUpB(rho, dt, dx,dy, u, v);
    p = presPoissPriodic(p, dx ,dy, nit, b);
    
    u(2:end-1, 2:end-1) = un(2:end-1, 2:end-1) - ...
        un(2:end-1, 2:end-1).*(dt/dx).*(un(2:end-1, 2:end-1) - un(2:end-1, 1:end-2)) - ...
        vn(2:end-1, 2:end-1).*(dt/dy).*(un(2:end-1, 2:end-1) - un(1:end-2, 2:end-1)) - ...
        (dt/(2*rho*dx)).*(p(2:end-1, 3:end) - p(2:end-1, 1:end-2)) + ...
        nu*(dt/(dx*dx)*(un(2:end-1, 3:end) - 2*un(2:end-1, 2:end-1) + un(2:end-1, 1:end-2)) + ...
        (dt/(dy*dy)).*(un(3:end, 2:end-1) - 2*un(2:end-1, 2:end-1) + un(1:end-2, 2:end-1))) + F*dt;
    
    
    v(2:end-1, 2:end-1) = vn(2:end-1, 2:end-1) - ...
        un(2:end-1, 2:end-1).*(dt/dx).*(vn(2:end-1, 2:end-1) - vn(2:end-1, 1:end-2)) - ...
        vn(2:end-1, 2:end-1).*(dt/dy).*(vn(2:end-1, 2:end-1) - vn(1:end-2, 2:end-1)) - ...
        dt/(2*rho*dy).*(p(3:end, 2:end-1) - p(1:end-2, 2:end-1)) + ...
        nu*(dt/(dx*dx)*(vn(2:end-1, 3:end) - 2*vn(2:end-1, 2:end-1) + vn(2:end-1, 1:end-2)) + ...
        (dt/(dy*dy).*(vn(3:end, 2:end-1) - 2*vn(2:end-1, 2:end-1) + vn(1:end-2, 2:end-1))));

    
    u(2:end-1, end-1) = un(2:end-1, end-1) - ...
        un(2:end-1, end-1)*(dt/dx).*(un(2:end-1, end-1) - un(2:end-1, end-2)) - ...
        vn(2:end-1, end-1)*(dt/dy).*(un(2:end-1, end-1) - un(1:end-2, end-1)) - ...
        dt/(2*rho*dx)*(p(2:end-1, 1) - p(2:end-1, end-2)) +...
        nu*(dt/(dx*dx)*(un(2:end-1, 1) - 2*un(2:end-1, end-1) + un(2:end-1, end-2)) +...
        (dt/(dy*dy))*(un(3:end, end-1) - 2*un(2:end-1, end-1) + un(1:end-2, end-1))) + F*dt;
    
    
    u(2:end-1, 1) = un(2:end-1, 1) - ...
        un(2:end-1, 1)*(dt/dx).*(un(2:end-1, 1) - un(2:end-1, end-1)) - ...
        vn(2:end-1, 1)*(dt/dy).*(un(2:end-1, 1) - un(1:end-2, 1)) - ...
        dt/(2*rho*dx)*(p(2:end-1, 2) - p(2:end-1, end-1)) +...
        nu*(dt/(dx*dx)*(un(2:end-1, 2) - 2*un(2:end-1, 1) + un(2:end-1, end-1)) +...
        dt/(dy*dy)*(un(3:end, 1) - 2*un(2:end-1, 1) + un(1:end-2, 1))) + F*dt;        
  
    v(2:end-1, end-1) = vn(2:end-1, end-1) - ...
        un(2:end-1, end-1)*(dt/dx).*(vn(2:end-1, end-1) - vn(2:end-1, end-2)) - ...
        vn(2:end-1, end-1)*(dt/dy).*(vn(2:end-1, end-1) - vn(1:end-2, end-1)) - ...
        dt/(2*rho*dy)*(p(3:end, end-1) - p(1:end-2, end-1)) + ...
        nu*(dt/(dx*dx)*(vn(2:end-1, 1) - 2*vn(2:end-1, end-1) + vn(2:end-1, end-2)) + ...
        (dt/(dy*dy)*(vn(3:end, end-1) - 2*vn(2:end-1, end-1) + vn(1:end-2, end-1))));

    v(2:end-1, 1) = vn(2:end-1, 1) - ...
        un(2:end-1, 1)*dt/dx.*(vn(2:end-1, 1) - vn(2:end-1, end-1)) - ...
        vn(2:end-1, 1)*dt/dy.*(vn(2:end-1, 1) - vn(1:end-2, 1)) - ...
        dt/(2*rho*dy)*(p(3:end, 1) - p(1:end-2, 1)) + ...
        nu*(dt/dx*dx*(vn(2:end-1, 2) - 2*vn(2:end-1, 1) + vn(2:end-1, end-1)) + ...
        (dt/dy*dy*(vn(3:end, 1) - 2*vn(2:end-1, 1) + vn(1:end-2, 1))));
    
    u(1, :) = 0;
    u(end-1, :) = 0;
    v(1, :) = 0;
    v(end-1, :) = 0;
    
    udiff = (sum(sum(u)) - sum(sum(un)))/sum(sum(u));
    stepcount = stepcount + 1;
        
end

quiver(X,Y,u,v)
    
end

function [b] = buildUpB(rho, dt, dx, dy, u, v)
    [nx, ny] = size(u);
    b = zeros(nx, ny);
    b(2:end-1, 2:end-1) = rho*(1/dt*((u(2:end-1, 3:end) - u(2:end-1, 1:end-2))/(2*dx)+(v(3:end, 2:end-1) - v(1:end-2, 2:end-1))/(2*dy)) - ...
                      ((u(2:end-1, 3:end) - u(2:end-1, 1:end-2))/(2*dx)).^2 - ...
                      2*((u(3:end, 2:end-1) - u(1:end-2, 2:end-1))/(2*dy)*(v(2:end-1, 3:end) - v(2:end-1, 1:end-2))/(2*dx)) - ...
                      ((v(3:end, 2:end-1) - v(1:end-2, 2:end-1))/(2*dy)).^2);
    
    b(2:end-1, end-1) = rho*(1/dt*((u(2:end-1, 1) - u(2:end-1, end-2))/(2*dx)+(v(3:end, end-1) - v(1:end-2, end-1))/(2*dy)) - ...
                    ((u(2:end-1, 1) - u(2:end-1, end-2))/(2*dx)).^2- ...
                    2*((u(3:end, end-1) - u(1:end-2, end-1))/(2*dy).*(v(2:end-1, 1) - v(2:end-1, end-2))/(2*dx)) - ...
                    ((v(3:end, end-1) - v(1:end-2, end-1))/(2*dy)).^2);

   
    b(2:end-1, 1) = rho*(1/dt*((u(2:end-1, 2) - u(2:end-1, end-1))/(2*dx)+(v(3:end, 1) - v(1:end-2, 1))/(2*dy)) - ...
                    ((u(2:end-1, 2) - u(2:end-1, end-1))/(2*dx)).^2 - ...
                    2*((u(3:end, 1) - u(1:end-2, 1))/(2*dy).*(v(2:end-1, 2) - v(2:end-1, end-1))/(2*dx)) - ...
                    ((v(3:end, 1) - v(1:end-2, 1))/(2*dy)).^2);
end

function [p] = presPoissPriodic(p, dx, dy, nit, b)
    [nx, ny] = size(p);
    pn = zeros(nx, ny);
    
    for q = 1:nit
       pn = p;
       p(2:end-1, 2:end-1) = ((pn(2:end-1, 3:end) + pn(2:end-1, 1:end-2))*dy^2 + (pn(3:end, 2:end-1) + pn(1:end-2, 2:end-1))*dx^2)/ ...
       (2*(dx^2+dy^2)) - ...
            dx^2*dy^2/(2*(dx^2+dy^2))*b(2:end-1, 2:end-1);

        
        p(2:end-1, end-1) = ((pn(2:end-1, 1) + pn(2:end-1, end-2))*dy^2+(pn(3:end, end-1) + pn(1:end-2, end-1))*dx^2)/ ...
            (2*(dx^2+dy^2)) - ...
            dx^2*dy^2/(2*(dx^2+dy^2))*b(2:end-1, end-1);

        
        p(2:end-1, 1) = ((pn(2:end-1, 2) + pn(2:end-1, end-1))*dy^2+(pn(3:end, 1) + pn(1:end-2, 1))*dx^2)/ ...
            (2*(dx^2+dy^2)) - ...
            dx^2*dy^2/(2*(dx^2+dy^2))*b(2:end-1, 1);
        
        
        p(end-1,:) =p(end-2,:);     
        p(1,:) = p(2, :);      
    end
end

